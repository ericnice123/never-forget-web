{"version":3,"sources":["components/appProviderComponent.js","components/homeComponents.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppConsumer","Consumer","AppProvider","state","summarySelectionState","currentMonthSummary","currentYearSummary","totalSummary","currentSelection","currentMonthData","monthlyEarning","spendings","food","total","costs","description","amount","date","entertainment","housing","others","currentYearData","data","month","spendingAmount","earning","totalSummaryData","year","totalSpending","totalEarning","_this2","this","react_default","a","createElement","Provider","value","setSummarySelectionState","selection","setState","props","children","Component","Home","homeComponents_Header","homeComponents_Summary","Header","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","context","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","onClick","Form","inline","Button","variant","label","color","Summary","list","console","log","_this","Jumbotron","Container","Row","Col","homeComponents_MyResponsivePie","getTotalSpending","MyResponsivePie","_ref","nivo_pie_esm","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","scheme","borderWidth","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","defs","type","background","size","padding","stagger","rotation","lineWidth","spacing","fill","match","legends","anchor","direction","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","effects","on","style","contextType","App","appProviderComponent","homeComponents","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35e9ffac.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n// Set Up The Initial Context\nconst AppContext = React.createContext()\n\n// Create an exportable consumer that can be injected into components\nexport const AppConsumer = AppContext.Consumer\n\n// Create the provider using a traditional React.Component class\nclass AppProvider extends Component {\n    state = {\n        summarySelectionState: {\n            currentMonthSummary: \"Current Month Summary\",\n            currentYearSummary: \"Current Year Summary\",\n            totalSummary: \"Total Summary\",\n            currentSelection: \"Current Month Summary\"\n        },\n        currentMonthData: {\n            monthlyEarning: 6000,\n            spendings: {\n                food: {\n                    total: 118.9,\n                    costs: [\n                        {\n                            description: \"hot pot\",\n                            amount: 50,\n                            date: \"04/02/2019\"\n                        },\n                        {\n                            description: \"hot pot\",\n                            amount: 68.9,\n                            date: \"04/02/2019\"\n                        }\n                    ]\n                },\n                entertainment: {\n                    total: 80,\n                    costs: [\n                        {\n                            description: \"switch game\",\n                            amount: 40,\n                            date: \"04/02/2019\"\n                        },\n                        {\n                            description: \"switch game\",\n                            amount: 40,\n                            date: \"04/01/2019\"\n                        },\n                    ]\n                },\n                housing: {\n                    total: 1995.5,\n                    costs: [\n                        {\n                            description: \"rent\",\n                            amount: 1975,\n                            date: \"04/02/2019\"\n                        },\n                        {\n                            description: \"gas\",\n                            amount: 20.5,\n                            date: \"04/15/2019\"\n                        }\n                    ]\n                },\n                others: {\n                    total: 80,\n                    costs: [\n                        {\n                            description: \"book\",\n                            amount: 40,\n                            date: \"04/02/2019\"\n                        },\n                        {\n                            description: \"stuff\",\n                            amount: 40,\n                            date: \"04/01/2019\"\n                        },\n                    ]\n                }\n            }\n        },\n        currentYearData: {\n            data: [\n                {\n                    month: 1,\n                    spendingAmount: 100,\n                    earning: 100\n                },\n                {\n                    month: 2,\n                    spendingAmount: 100,\n                    earning: 100\n                }\n            ]\n        },\n        totalSummaryData: {\n            data: [\n                {\n                    year: 2019,\n                    totalSpending: 100000,\n                    totalEarning: 1000000\n                },\n            ]\n        }\n    }\n    render() {\n        return (\n            // value prop is where we define what values \n            // that are accessible to consumer components\n            <AppContext.Provider value={{\n                state: this.state,\n                setSummarySelectionState: (selection) => {\n                    this.setState({\n                        summarySelectionState: {\n                            currentMonthSummary: \"Current Month Summary\",\n                            currentYearSummary: \"Current Year Summary\",\n                            totalSummary: \"Total Summary\",\n                            currentSelection: selection\n                        }\n                    })\n                }\n            }}>\n                {this.props.children}\n            </AppContext.Provider>\n        )\n    }\n}\nexport default AppProvider;","import React, { Component } from \"react\";\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, Container, Jumbotron, Row, Col } from \"react-bootstrap\";\nimport { RadialChart, Hint } from 'react-vis';\nimport { AppConsumer } from './appProviderComponent';\nimport { ResponsivePie } from '@nivo/pie'\nimport \"../style/style.css\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <Summary />\n            </div>\n        )\n    }\n}\n\nclass Header extends Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div>\n                <AppConsumer>\n                    {(context) => (\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <Navbar.Brand href=\"#home\">Never Forget</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"mr-auto\">\n                                    <NavDropdown title={context.state.summarySelectionState.currentSelection} id=\"basic-nav-dropdown\">\n                                        <NavDropdown.Item onClick={() => context.setSummarySelectionState(context.state.summarySelectionState.currentMonthSummary)}\n                                            href=\"#action/3.1\">\n                                            {context.state.summarySelectionState.currentMonthSummary}\n                                        </NavDropdown.Item>\n                                        <NavDropdown.Item onClick={() => context.setSummarySelectionState(context.state.summarySelectionState.currentYearSummary)}\n                                            href=\"#action/3.2\">\n                                            {context.state.summarySelectionState.currentYearSummary}\n                                        </NavDropdown.Item>\n                                        <NavDropdown.Item onClick={() => context.setSummarySelectionState(context.state.summarySelectionState.totalSummary)}\n                                            href=\"#action/3.3\">\n                                            {context.state.summarySelectionState.totalSummary}\n                                        </NavDropdown.Item>\n                                    </NavDropdown>\n                                </Nav>\n                                <Form inline>\n                                    <Button variant=\"outline-warning\">SignIn</Button>\n                                    <Button variant=\"outline-success\">LogIn</Button>\n                                </Form>\n                            </Navbar.Collapse>\n                        </Navbar>\n                    )}\n                </AppConsumer>\n            </div>\n        )\n    }\n}\n\n\nconst data =\n    [\n        {\n            \"id\": \"javascript\",\n            \"label\": \"javascript\",\n            \"value\": 122,\n            \"color\": \"hsl(345, 70%, 50%)\"\n        },\n        {\n            \"id\": \"go\",\n            \"label\": \"go\",\n            \"value\": 202,\n            \"color\": \"hsl(60, 70%, 50%)\"\n        },\n        {\n            \"id\": \"ruby\",\n            \"label\": \"ruby\",\n            \"value\": 172,\n            \"color\": \"hsl(285, 70%, 50%)\"\n        },\n        {\n            \"id\": \"elixir\",\n            \"label\": \"elixir\",\n            \"value\": 219,\n            \"color\": \"hsl(240, 70%, 50%)\"\n        },\n        {\n            \"id\": \"hack\",\n            \"label\": \"hack\",\n            \"value\": 454,\n            \"color\": \"hsl(118, 70%, 50%)\"\n        }\n    ]\n\nclass Summary extends Component {\n\n    getTotalSpending() {\n        const contextValue = this.context;\n        var spendings = contextValue.state.currentMonthData.spendings;\n        var total = spendings.food.total + spendings.entertainment.total + spendings.housing.total + spendings.others.total;\n        return total;\n    }\n\n    getData() {\n        const contextValue = this.context;\n\n        var spendings = contextValue.state.currentMonthData.spendings;\n        this.list = [];\n\n        console.log(spendings.food);\n        console.log(spendings.entertainment);\n        console.log(spendings.housing);\n        console.log(spendings.others);\n    }\n\n    render() {\n        return (\n            <AppConsumer>\n                {(context) => (\n                    <Jumbotron>\n                        <Container>\n                            <Row>\n                                <Col>\n                                    {/*                                     <RadialChart\n                                        className={'donut-chart-example'}\n                                        innerRadius={100}\n                                        radius={140}\n                                        getAngle={d => d.theta}\n                                        colorType=\"literal\"\n                                        data={[\n                                            { theta: context.state.currentMonthData.spendings.food.total, color: \"red\" },\n                                            { theta: context.state.currentMonthData.spendings.entertainment.total, color: 'green' },\n                                            { theta: context.state.currentMonthData.spendings.housing.total, color: \"blue\" },\n                                            { theta: context.state.currentMonthData.spendings.others.total, color: \"black\" }\n                                        ]}\n                                        onValueMouseOver={v => this.setState({ value: v })}\n                                        onSeriesMouseOut={v => this.setState({ value: false })}\n                                        width={300}\n                                        height={300}\n                                        padAngle={0.04}\n                                        showLabels={true}\n                                    /> */}\n                                    <MyResponsivePie data={data} />\n                                </Col>\n                                <Col>\n                                    <Row>\n                                        <div className=\"foo red\"></div>\n                                        <p>Food, costs: {context.state.currentMonthData.spendings.food.total}</p>\n                                    </Row>\n                                    <Row>\n                                        <div className=\"foo green\"></div>\n                                        <p>Entertainment, costs: {context.state.currentMonthData.spendings.entertainment.total}</p>\n                                    </Row>\n                                    <Row>\n                                        <div className=\"foo blue\"></div>\n                                        <p>Housing, costs: {context.state.currentMonthData.spendings.housing.total}</p>\n                                    </Row>\n                                    <Row>\n                                        <div className=\"foo black\"></div>\n                                        <p>Others, costs: {context.state.currentMonthData.spendings.others.total}</p>\n                                    </Row>\n                                    <Row>\n                                        <div className=\"foo black\"></div>\n                                        <p>Total Spending: {this.getTotalSpending()}</p>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Jumbotron>\n                )}\n            </AppConsumer>\n        )\n    }\n}\n\n\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\nconst MyResponsivePie = ({ data /* see data tab */ }) => (\n    <ResponsivePie\n        data={data}\n        margin={{\n            \"top\": 40,\n            \"right\": 80,\n            \"bottom\": 80,\n            \"left\": 80\n        }}\n        innerRadius={0.5}\n        padAngle={0.7}\n        cornerRadius={3}\n        colors={{\n            \"scheme\": \"nivo\"\n        }}\n        borderWidth={1}\n        borderColor={{\n            \"from\": \"color\",\n            \"modifiers\": [\n                [\n                    \"darker\",\n                    0.2\n                ]\n            ]\n        }}\n        radialLabelsSkipAngle={10}\n        radialLabelsTextXOffset={6}\n        radialLabelsTextColor=\"#333333\"\n        radialLabelsLinkOffset={0}\n        radialLabelsLinkDiagonalLength={16}\n        radialLabelsLinkHorizontalLength={24}\n        radialLabelsLinkStrokeWidth={1}\n        radialLabelsLinkColor={{\n            \"from\": \"color\"\n        }}\n        slicesLabelsSkipAngle={10}\n        slicesLabelsTextColor=\"#333333\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        defs={[\n            {\n                \"id\": \"dots\",\n                \"type\": \"patternDots\",\n                \"background\": \"inherit\",\n                \"color\": \"rgba(255, 255, 255, 0.3)\",\n                \"size\": 4,\n                \"padding\": 1,\n                \"stagger\": true\n            },\n            {\n                \"id\": \"lines\",\n                \"type\": \"patternLines\",\n                \"background\": \"inherit\",\n                \"color\": \"rgba(255, 255, 255, 0.3)\",\n                \"rotation\": -45,\n                \"lineWidth\": 6,\n                \"spacing\": 10\n            }\n        ]}\n        fill={[\n            {\n                \"match\": {\n                    \"id\": \"ruby\"\n                },\n                \"id\": \"dots\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"c\"\n                },\n                \"id\": \"dots\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"go\"\n                },\n                \"id\": \"dots\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"python\"\n                },\n                \"id\": \"dots\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"scala\"\n                },\n                \"id\": \"lines\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"lisp\"\n                },\n                \"id\": \"lines\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"elixir\"\n                },\n                \"id\": \"lines\"\n            },\n            {\n                \"match\": {\n                    \"id\": \"javascript\"\n                },\n                \"id\": \"lines\"\n            }\n        ]}\n        legends={[\n            {\n                \"anchor\": \"bottom\",\n                \"direction\": \"row\",\n                \"translateY\": 56,\n                \"itemWidth\": 100,\n                \"itemHeight\": 18,\n                \"itemTextColor\": \"#999\",\n                \"symbolSize\": 18,\n                \"symbolShape\": \"circle\",\n                \"effects\": [\n                    {\n                        \"on\": \"hover\",\n                        \"style\": {\n                            \"itemTextColor\": \"#000\"\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\n\nSummary.contextType = AppConsumer; // This part is important to access context values\n\n\nexport default Home;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/homeComponents\";\nimport AppProvider from './components/appProviderComponent';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <AppProvider>\n        <Home />\n      </AppProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}